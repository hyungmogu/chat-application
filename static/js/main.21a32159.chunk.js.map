{"version":3,"sources":["components/ChatInput/index.js","components/ChatBox/index.js","components/Navigation/index.js","components/Users/index.js","screens/ChatScreen.js","screens/LoginScreen.js","screens/SignupScreen.js","App.js","reportWebVitals.js","index.js"],"names":["colorGrey","SubmitButtonStyle","Button","styled","button","SubmitButton","props","onClick","disabled","icon","faPaperPlane","ChatTextAreaStyle","Div","div","Textarea","textarea","ChatTextArea","value","onChange","POST_MUTATION","gql","ChatInput","useState","texts","setText","useMutation","variables","onCompleted","_","onError","e","alert","post","target","trim","isValid","ChatBoxStyle","isCurrentUser","Section","section","Header","header","ChatBox","split","map","textline","username","localStorage","getItem","postedBy","ChatBoxList","chats","chat","id","ChatBoxSectionStyle","ChatBoxSection","scrollToBottom","scrollToBottomRef","current","scrollIntoView","behavior","React","createRef","this","ref","sectionRef","Component","colorOrange","LOGOUT_MUTATION","LogoutButtonStyle","LogoutButton","history","useHistory","clear","push","logout","MobileNavigationStyle","Nav","nav","MobileNavigation","mobileNavigationHeight","UserListStyle","Ul","ul","UserList","userList","users","user","User","isOwner","UserListMobileStyle","toggled","UserListMobile","UserStyle","Span","span","Li","li","faUser","ChatInputSection","QUERY","NEW_CHAT_SUBSCRIPTION","NEW_PARTICIPANT_SUBSCRIPTION","REMOVE_PARTICIPANT_SUBSCRIPTION","ChatScreen","participants","setToggled","useEffect","token","useQuery","data","subscribeToMore","document","updateQuery","prev","subscriptionData","newChat","find","Object","assign","newParticipant","res","exitedParticipant","removeParticipant","participant","colorWhite","H1","h1","Form","form","Input","input","ButtonPrimary","ButtonSecondary","NavLink","LOGIN_MUTATION","LoginScreen","setUsername","password","setPassword","login","setItem","console","log","type","placeholder","preventDefault","to","SIGNUP_MUTATION","SignupScreen","password2","setPassword2","signup","App","className","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","authLink","setContext","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","authToken","link","query","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21a32159.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMutation, gql } from '@apollo/client';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\nconst colorOrange = \"#FFA341\";\n\nconst SubmitButtonStyle = {\n    Button: styled.button`\n        border: none;\n        background-color: white;\n        font-size: 1.5em;\n        text-decoration: none;\n        color: ${colorOrange};\n        padding: 0.5em;\n        margin: 0.5em;\n        cursor: pointer;\n\n        &:disabled {\n            opacity: 0.8;\n        }\n    `\n};\n\nexport function SubmitButton(props) {\n    return (\n        <SubmitButtonStyle.Button onClick={props.onClick} disabled={props.disabled}>\n            <FontAwesomeIcon icon={faPaperPlane}/>\n        </SubmitButtonStyle.Button>\n    );\n}\n\n\nconst ChatTextAreaStyle = {\n    Div: styled.div`\n        background-color: ${colorGrey};\n        padding: 1em;\n        border-radius: 5em;\n        display:flex;\n        flex-grow: 1;\n    `,\n    Textarea: styled.textarea`\n        border: none;\n        resize: none;\n        width: 100%;\n        background-color: ${colorGrey};\n        text-decoration: none;\n        padding: 1em;\n        overflow-y: scroll;\n\n        &:focus {\n            outline: none;\n        }\n    `\n};\n\nfunction ChatTextArea(props) {\n    return (\n        <ChatTextAreaStyle.Div>\n            <ChatTextAreaStyle.Textarea value={props.value} onChange={props.onChange}/>\n        </ChatTextAreaStyle.Div>\n    );\n}\n\nconst POST_MUTATION = gql`\n    mutation PostMutation(\n        $texts: String!\n    ) {\n        post(texts: $texts) {\n            id\n            postedBy {\n            id,\n                username\n            }\n            texts\n        }\n    }\n`;\n\nexport function ChatInput(props) {\n    const [texts, setText] = useState(\"\");\n\n    const isValid = (texts) => {\n        if (!texts || texts.trim() === \"\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    const [post] = useMutation(POST_MUTATION, {\n        variables: {\n          texts: texts,\n        },\n        onCompleted: (_) => {\n            setText(\"\");\n        },\n        onError(e) {\n            alert(\"Error occured\");\n        }\n    });\n\n    return (\n        <>\n            <ChatTextArea value={texts} onChange={ e => setText(e.target.value)}/>\n            <SubmitButton onClick={post} disabled={!isValid(texts)}/>\n        </>\n    );\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nconst colorOrange = \"#FFA341\";\n\nconst ChatBoxStyle = {\n    Div: styled.div`\n        display: flex;\n        justify-content: ${props => props.isCurrentUser ? \"flex-end\" : \"initial\"};\n    `,\n    Section: styled.section`\n        margin: 0;\n        background-color: ${colorOrange};\n        padding: 1em;\n        border-radius: 1.5em;\n        max-width: 12em;\n        font-size: 0.8em;\n        white-space: pre-wrap;\n    `,\n    Header: styled.header`\n        font-size: 0.7em;\n        padding: 0.5em 1em;\n    `\n};\n\nfunction ChatBox(props) {\n    const texts = props.texts.split(\"\\n\").map(textline => <p>{textline}</p>);\n    const username = localStorage.getItem(\"USERNAME\");\n    return (\n        <ChatBoxStyle.Div isCurrentUser={props.postedBy.username === username}>\n            <article>\n                <ChatBoxStyle.Header>\n                    <span>{props.postedBy.username}</span>\n                </ChatBoxStyle.Header>\n                <ChatBoxStyle.Section>\n                    {texts}\n                </ChatBoxStyle.Section>\n            </article>\n        </ChatBoxStyle.Div>\n    );\n}\n\n\nfunction ChatBoxList(props) {\n    return props.chats.map(chat => <ChatBox key={chat.id} {...chat}/>)\n}\n\nconst ChatBoxSectionStyle = {\n    Section: styled.section`\n        flex-grow: 1;\n        overflow-y: scroll;\n        padding: 1em;\n    `\n};\n\nexport class ChatBoxSection extends Component {\n    constructor(props) {\n        super(props);\n        this.scrollToBottomRef = React.createRef();\n    }\n\n    scrollToBottom = () => {\n        this.scrollToBottomRef.current.scrollIntoView({ behavior: 'auto' })\n    }\n\n    componentDidMount () {\n        this.scrollToBottom()\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom()\n    }\n\n    render() {\n        return (\n            <ChatBoxSectionStyle.Section ref={this.sectionRef}>\n                <ChatBoxList chats={this.props.chats}/>\n                <div ref={this.scrollToBottomRef}/>\n            </ChatBoxSectionStyle.Section>\n        );\n    }\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useMutation, gql } from '@apollo/client';\n\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst LOGOUT_MUTATION = gql`\n  mutation LogoutMutation {\n    logout {\n      id\n      username\n      loggedIn\n    }\n  }\n`;\n\nconst LogoutButtonStyle = {\n    Button: styled.button`\n        border: none;\n        background-color: ${colorWhite};\n        font-size: 0.8em;\n        text-decoration: none;\n        color: ${colorOrange};\n        padding: 0.5em 1em;\n        margin: 0.5em;\n        cursor: pointer;\n        border-radius: 5em;\n\n        &:disabled {\n            opacity: 0.8;\n        }\n    `\n};\n\nfunction LogoutButton() {\n    const history = useHistory();\n\n    const [logout] = useMutation(LOGOUT_MUTATION, {\n        onCompleted: ( _ ) => {\n            localStorage.clear();\n            history.push(\"/\");\n        }\n    });\n\n    return (\n        <LogoutButtonStyle.Button onClick={logout}>\n            Logout\n        </LogoutButtonStyle.Button>\n    );\n};\n\nconst MobileNavigationStyle = {\n    Button: styled.button`\n        background-color: transparent;\n        border: none;\n        padding: 0.5em;\n        cursor: pointer;\n        visibility: initial;\n\n        @media only screen and (min-width: 850px) {\n            visibility: hidden;\n        }\n    `,\n    Nav: styled.nav`\n        padding: 0.39em 0.75em;\n        background-color: ${colorOrange};\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    `,\n    Div: styled.div`\n        background-color: white;\n        width: 1.75em;\n        height: 0.12em;\n        margin-bottom: 0.4em;\n\n        &:last-child {\n            margin: 0;\n        }\n    `\n};\n\nexport function MobileNavigation(props) {\n    return (\n        <MobileNavigationStyle.Nav>\n            <MobileNavigationStyle.Button onClick={props.onClick}>\n                <MobileNavigationStyle.Div></MobileNavigationStyle.Div>\n                <MobileNavigationStyle.Div></MobileNavigationStyle.Div>\n                <MobileNavigationStyle.Div></MobileNavigationStyle.Div>\n            </MobileNavigationStyle.Button>\n            <LogoutButton/>\n        </MobileNavigationStyle.Nav>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\nconst mobileNavigationHeight = \"3.30em\";\n\nconst UserListStyle = {\n    Ul: styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: calc(100vh - ${mobileNavigationHeight});\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n        display: none;\n\n        @media only screen and (min-width: 850px) {\n            display: initial;\n        }\n    `\n};\n\nexport function UserList(props) {\n    const username = localStorage.getItem(\"USERNAME\");\n    const userList = props.users.map(user => <User key={user.id} {...user} isOwner={username === user.username}/>);\n    return (\n        <UserListStyle.Ul>\n            {userList}\n        </UserListStyle.Ul>\n    );\n}\n\nconst UserListMobileStyle = {\n    Ul: styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: calc(100vh - ${mobileNavigationHeight});\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n        display: ${props => props.toggled ? \"initial\" : \"none\"};\n\n        @media only screen and (min-width: 850px) {\n            display: none;\n        }\n    `\n};\n\nexport function UserListMobile(props) {\n    const username = localStorage.getItem(\"USERNAME\");\n    const userList = props.users.map(user => <User key={user.id} {...user} isOwner={username === user.username}/>);\n\n    return (\n        <UserListMobileStyle.Ul toggled={props.toggled}>\n            {userList}\n        </UserListMobileStyle.Ul>\n    );\n}\n\n\nconst UserStyle = {\n    Div: styled.div`\n        color: ${colorWhite};\n        background-color: ${colorOrange};\n        padding: 0.8em;\n        display: inline-block;\n        border-radius: 50%;\n        margin-right: 1em;\n\n        div {\n            width: 1.25em;\n            height: 1.25em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n    `,\n    Span: styled.span`\n        font-size: 0.8em;\n    `,\n    Li: styled.li`\n        display: flex;\n        align-items: center;\n        padding: 0.5em 1em;\n    `\n};\n\n\nfunction User(props) {\n    return (\n        <UserStyle.Li>\n            <UserStyle.Div>\n                <div>\n                    <FontAwesomeIcon icon={faUser}/>\n                </div>\n            </UserStyle.Div>\n            <UserStyle.Span>{props.username} {props.isOwner ? \"(Me)\" : \"\"}</UserStyle.Span>\n        </UserStyle.Li>\n    );\n}\n","import styled from 'styled-components';\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\nimport { ChatInput } from '../components/ChatInput';\nimport { ChatBoxSection } from '../components/ChatBox';\nimport { MobileNavigation } from '../components/Navigation';\nimport { UserList, UserListMobile } from '../components/Users';\n\nconst mobileNavigationHeight = \"3.30em\";\n\nconst Div = styled.div`\n    display: flex;\n`;\n\nconst Section = styled.section`\n    height: calc(100vh - ${mobileNavigationHeight});\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n`;\n\nconst ChatInputSection = styled.section`\n    display: flex;\n    padding: 1em;\n`;\n\nconst QUERY = gql`\n  query {\n    participants {\n      id,\n      username\n    },\n    chats {\n      id,\n      postedBy {\n        username\n      },\n      texts\n    }\n  }\n`;\n\nconst NEW_CHAT_SUBSCRIPTION = gql`\n  subscription {\n    newChat {\n      id\n      texts\n      postedBy {\n        id\n        username\n      }\n    }\n  }\n`;\n\nconst NEW_PARTICIPANT_SUBSCRIPTION = gql`\n  subscription {\n    newParticipant {\n      id\n      username\n    }\n  }\n`;\n\nconst REMOVE_PARTICIPANT_SUBSCRIPTION = gql`\n  subscription {\n    removeParticipant {\n      id\n      username\n    }\n  }\n`;\n\nfunction ChatScreen() {\n    const history = useHistory();\n    const [toggled, setToggled] = useState(false);\n    let chats;\n    let participants;\n\n    useEffect(_ => {\n      const username = localStorage.getItem(\"USERNAME\");\n      const token = localStorage.getItem(\"AUTH_TOKEN\");\n\n      if (!username || !token) {\n        history.push(\"/\");\n      }\n    })\n\n    const { data, subscribeToMore } = useQuery(QUERY);\n    chats = data && data.chats ? data.chats : [];\n    participants = data && data.participants ? data.participants : [];\n\n    subscribeToMore({\n      document: NEW_CHAT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newChat = subscriptionData.data.newChat;\n        const exists = prev.chats.find(\n          ({ id }) => id === newChat.id\n        );\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          chats: [...prev.chats, newChat]\n        });\n      }\n    });\n\n    subscribeToMore({\n      document: NEW_PARTICIPANT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        const newParticipant = subscriptionData.data.newParticipant;\n        const exists = prev.participants.find(\n          ({ id }) => id === newParticipant.id\n        );\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          participants: [...prev.participants, newParticipant]\n        });\n      }\n    });\n\n    subscribeToMore({\n      document: REMOVE_PARTICIPANT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        let res = [];\n\n        const exitedParticipant = subscriptionData.data.removeParticipant;\n        const exists = prev.participants.find(\n          ({ id }) => id === exitedParticipant.id\n        );\n\n        if (!exists) return prev;\n\n        for (let participant of prev.participants) {\n          if (participant.id === exitedParticipant.id) {\n            continue;\n          }\n          res.push(participant);\n        }\n\n        return Object.assign({}, prev, {\n          participants: res\n        });\n      }\n    });\n\n\n    return (\n      <>\n        <MobileNavigation onClick={_ => setToggled(!toggled)}/>\n        <Div>\n            <UserList users={participants}/>\n            <UserListMobile users={participants} toggled={toggled}/>\n            <Section>\n            <ChatBoxSection chats={chats}/>\n            <ChatInputSection>\n                <ChatInput/>\n            </ChatInputSection>\n            </Section>\n        </Div>\n      </>\n    );\n  }\n\n  export default ChatScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $username: String!\n    $password: String!\n  ) {\n    login(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction LoginScreen() {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(\"AUTH_TOKEN\", login.token);\n      localStorage.setItem(\"USERNAME\", login.user.username);\n      history.push('/chat');\n    },\n    onError: (e) => {\n      console.log(e);\n    }\n  });\n\n  const isValid = (username, password) => {\n    if (!username || !password) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    login();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password)}>\n              Login\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/signup\">\n              Signup\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default LoginScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n\n  &:disabled,\n  &[disabled]{\n    opacity: 0.6;\n  }\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $username: String!\n    $password: String!\n  ) {\n    signup(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction SignupScreen(props) {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ signup }) => {\n      localStorage.setItem(\"AUTH_TOKEN\", signup.token);\n      localStorage.setItem(\"USERNAME\", signup.user.username);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password, password2) => {\n    if (!username || !password || !password2) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    if (password2.trim() === \"\") {\n      return false;\n    }\n\n    if (password.value !== password2.value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    signup();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password Confirm\" value={password2} onChange={e => setPassword2(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password, password2)}>\n              Signup\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/\">\n              Back\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default SignupScreen;\n","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport ChatScreen from './screens/ChatScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <main className=\"App\">\n          <Switch>\n              <Route path=\"/chat\" component={ChatScreen}/>\n              <Route exact path=\"/signup\" component={SignupScreen}/>\n              <Route exact path=\"/\" component={LoginScreen}/>\n          </Switch>\n        </main>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  split\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"AUTH_TOKEN\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(\"AUTH_TOKEN\")\n    }\n  }\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return (\n      kind === 'OperationDefinition' &&\n      operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}