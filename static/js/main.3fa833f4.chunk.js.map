{"version":3,"sources":["components/ChatInput/index.js","components/ChatBox/index.js","components/Navigation/index.js","components/Users/index.js","screens/ChatScreen.js","screens/LoginScreen.js","screens/SignupScreen.js","App.js","reportWebVitals.js","index.js"],"names":["colorGrey","Div","styled","div","Textarea","textarea","ChatTextArea","props","value","onChange","Button","button","SubmitButton","onClick","disabled","icon","faPaperPlane","POST_MUTATION","gql","ChatInput","useState","texts","setText","useMutation","variables","onCompleted","_","onError","e","alert","post","target","trim","isValid","ChatBox","split","map","textline","username","localStorage","getItem","postedBy","Section","section","Header","header","ChatBoxList","chats","chat","id","ChatBoxSection","scrollToBottom","scrollToBottomRef","current","scrollIntoView","behavior","React","createRef","this","ref","sectionRef","Component","colorOrange","LOGOUT_MUTATION","LogoutButton","history","useHistory","clear","push","logout","MobileNavigation","Nav","nav","mobileNavigationHeight","UserList","userList","users","user","User","isOwner","Ul","ul","UserListMobile","toggled","Span","span","Li","li","faUser","ChatInputSection","QUERY","NEW_CHAT_SUBSCRIPTION","NEW_PARTICIPANT_SUBSCRIPTION","REMOVE_PARTICIPANT_SUBSCRIPTION","ChatScreen","participants","setToggled","useQuery","data","subscribeToMore","document","updateQuery","prev","subscriptionData","newChat","find","Object","assign","newParticipant","res","exitedParticipant","removeParticipant","participant","colorWhite","H1","h1","Form","form","Input","input","ButtonPrimary","ButtonSecondary","NavLink","LOGIN_MUTATION","LoginScreen","setUsername","password","setPassword","login","setItem","token","console","log","type","placeholder","preventDefault","to","SIGNUP_MUTATION","SignupScreen","password2","setPassword2","signup","App","className","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","authLink","setContext","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","authToken","link","query","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fa833f4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMutation, gql } from '@apollo/client';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\n\nconst Div = styled.div`\n    background-color: ${colorGrey};\n    padding: 1em;\n    border-radius: 5em;\n    display:flex;\n    flex-grow: 1;\n`;\n\nconst Textarea = styled.textarea`\n    border: none;\n    resize: none;\n    width: 100%;\n    background-color: ${colorGrey};\n    text-decoration: none;\n    padding: 1em;\n    overflow-y: scroll;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nfunction ChatTextArea(props) {\n    return (\n        <Div>\n            <Textarea value={props.value} onChange={props.onChange}/>\n        </Div>\n    );\n}\n\nconst colorOrange = \"#FFA341\";\n\nconst Button = styled.button`\n    border: none;\n    background-color: white;\n    font-size: 1.5em;\n    text-decoration: none;\n    color: ${colorOrange};\n    padding: 0.5em;\n    margin: 0.5em;\n    cursor: pointer;\n\n    &:disabled {\n        opacity: 0.8;\n    }\n`;\n\nfunction SubmitButton(props) {\n    return (\n        <Button onClick={props.onClick} disabled={props.disabled}>\n            <FontAwesomeIcon icon={faPaperPlane}/>\n        </Button>\n    );\n}\n\nconst POST_MUTATION = gql`\n    mutation PostMutation(\n        $texts: String!\n    ) {\n        post(texts: $texts) {\n            id\n            postedBy {\n            id,\n                username\n            }\n            texts\n        }\n    }\n`;\n\nexport function ChatInput(props) {\n    const [texts, setText] = useState(\"\");\n\n    const isValid = (texts) => {\n        if (!texts || texts.trim() === \"\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    const [post] = useMutation(POST_MUTATION, {\n        variables: {\n          texts: texts,\n        },\n        onCompleted: (_) => {\n            setText(\"\");\n        },\n        onError(e) {\n            alert(\"Error occured\");\n        }\n    });\n\n    return (\n        <>\n            <ChatTextArea value={texts} onChange={ e => setText(e.target.value)}/>\n            <SubmitButton onClick={post} disabled={!isValid(texts)}/>\n        </>\n    );\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nconst colorOrange = \"#FFA341\";\n\nfunction ChatBox(props) {\n    const texts = props.texts.split(\"\\n\").map(textline => <p>{textline}</p>);\n    const username = localStorage.getItem(\"USERNAME\");\n    const Div = styled.div`\n        display: flex;\n        justify-content: ${props.postedBy.username === username ? \"flex-end\" : \"initial\"};\n    `;\n\n    const Section = styled.section`\n        margin: 0;\n        background-color: ${colorOrange};\n        padding: 1em;\n        border-radius: 1.5em;\n        max-width: 12em;\n        font-size: 0.8em;\n        white-space: pre-wrap;\n    `;\n\n    const Header = styled.header`\n        font-size: 0.7em;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <Div>\n            <article>\n                <Header>\n                    <span>{props.postedBy.username}</span>\n                </Header>\n                <Section>\n                    {texts}\n                </Section>\n            </article>\n        </Div>\n    );\n}\n\n\nfunction ChatBoxList(props) {\n    return props.chats.map(chat => <ChatBox key={chat.id} {...chat}/>)\n}\n\nexport class ChatBoxSection extends Component {\n    constructor(props) {\n        super(props);\n        this.scrollToBottomRef = React.createRef();\n    }\n\n    scrollToBottom = () => {\n        this.scrollToBottomRef.current.scrollIntoView({ behavior: 'auto' })\n    }\n\n    componentDidMount () {\n        this.scrollToBottom()\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom()\n    }\n\n    render() {\n        const Section = styled.section`\n            flex-grow: 1;\n            overflow-y: scroll;\n            padding: 1em;\n        `;\n\n        return (\n            <Section ref={this.sectionRef}>\n                <ChatBoxList chats={this.props.chats}/>\n                <div ref={this.scrollToBottomRef}/>\n            </Section>\n        );\n    }\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useMutation, gql } from '@apollo/client';\n\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst LOGOUT_MUTATION = gql`\n  mutation LogoutMutation {\n    logout {\n      id\n      username\n      loggedIn\n    }\n  }\n`;\n\nfunction LogoutButton() {\n    const history = useHistory();\n\n    const [logout] = useMutation(LOGOUT_MUTATION, {\n        onCompleted: ( _ ) => {\n            localStorage.clear();\n            history.push(\"/\");\n        }\n    });\n\n    const Button = styled.button`\n        border: none;\n        background-color: ${colorWhite};\n        font-size: 0.8em;\n        text-decoration: none;\n        color: ${colorOrange};\n        padding: 0.5em 1em;\n        margin: 0.5em;\n        cursor: pointer;\n        border-radius: 5em;\n\n        &:disabled {\n            opacity: 0.8;\n        }\n    `;\n\n    return (\n        <Button onClick={logout}>\n            Logout\n        </Button>\n    );\n}\n\nexport function MobileNavigation(props) {\n    const Button = styled.button`\n        background-color: transparent;\n        border: none;\n        padding: 0.5em;\n        cursor: pointer;\n        visibility: initial;\n\n        @media only screen and (min-width: 850px) {\n            visibility: hidden;\n        }\n    `;\n\n    const Nav = styled.nav`\n        padding: 0.39em 0.75em;\n        background-color: ${colorOrange};\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    `;\n\n    const Div = styled.div`\n        background-color: white;\n        width: 1.75em;\n        height: 0.12em;\n        margin-bottom: 0.4em;\n\n        &:last-child {\n            margin: 0;\n        }\n    `;\n\n    return (\n        <Nav>\n            <Button onClick={props.onClick}>\n                <Div></Div>\n                <Div></Div>\n                <Div></Div>\n            </Button>\n            <LogoutButton/>\n        </Nav>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\nconst mobileNavigationHeight = \"3.30em\";\n\nexport function UserList(props) {\n    const username = localStorage.getItem(\"USERNAME\");\n    const userList = props.users.map(user => <User key={user.id} {...user} isOwner={username === user.username}/>);\n    const Ul = styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: calc(100vh - ${mobileNavigationHeight});\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n        display: none;\n\n        @media only screen and (min-width: 850px) {\n            display: initial;\n        }\n    `;\n    return (\n        <Ul>\n            {userList}\n        </Ul>\n    );\n}\n\nexport function UserListMobile(props) {\n    const username = localStorage.getItem(\"USERNAME\");\n    const userList = props.users.map(user => <User key={user.id} {...user} isOwner={username === user.username}/>);\n    const Ul = styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: calc(100vh - ${mobileNavigationHeight});\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n        display: ${props.toggled ? \"initial\" : \"none\"};\n\n        @media only screen and (min-width: 850px) {\n            display: none;\n        }\n    `;\n    return (\n        <Ul>\n            {userList}\n        </Ul>\n    );\n}\n\nfunction User(props) {\n    const Div = styled.div`\n        color: ${colorWhite};\n        background-color: ${colorOrange};\n        padding: 0.8em;\n        display: inline-block;\n        border-radius: 50%;\n        margin-right: 1em;\n\n        div {\n            width: 1.25em;\n            height: 1.25em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n    `;\n\n    const Span = styled.span`\n        font-size: 0.8em;\n    `;\n\n    const Li = styled.li`\n        display: flex;\n        align-items: center;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <Li>\n            <Div>\n                <div>\n                    <FontAwesomeIcon icon={faUser}/>\n                </div>\n            </Div>\n            <Span>{props.username} {props.isOwner ? \"(Me)\" : \"\"}</Span>\n        </Li>\n    );\n}\n","import styled from 'styled-components';\nimport React, { useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { ChatInput } from '../components/ChatInput';\nimport { ChatBoxSection } from '../components/ChatBox';\nimport { MobileNavigation } from '../components/Navigation';\nimport { UserList, UserListMobile } from '../components/Users';\n\nconst mobileNavigationHeight = \"3.30em\";\n\nconst Div = styled.div`\n    display: flex;\n`;\n\nconst Section = styled.section`\n    height: calc(100vh - ${mobileNavigationHeight});\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n`;\n\nconst ChatInputSection = styled.section`\n    display: flex;\n    padding: 1em;\n`;\n\nconst QUERY = gql`\n  query {\n    participants {\n      id,\n      username\n    },\n    chats {\n      id,\n      postedBy {\n        username\n      },\n      texts\n    }\n  }\n`;\n\nconst NEW_CHAT_SUBSCRIPTION = gql`\n  subscription {\n    newChat {\n      id\n      texts\n      postedBy {\n        id\n        username\n      }\n    }\n  }\n`;\n\nconst NEW_PARTICIPANT_SUBSCRIPTION = gql`\n  subscription {\n    newParticipant {\n      id\n      username\n    }\n  }\n`;\n\nconst REMOVE_PARTICIPANT_SUBSCRIPTION = gql`\n  subscription {\n    removeParticipant {\n      id\n      username\n    }\n  }\n`;\n\nfunction ChatScreen() {\n    const [toggled, setToggled] = useState(false);\n    let chats;\n    let participants;\n\n    const { data, subscribeToMore } = useQuery(QUERY);\n    chats = data && data.chats ? data.chats : [];\n    participants = data && data.participants ? data.participants : [];\n\n    subscribeToMore({\n      document: NEW_CHAT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newChat = subscriptionData.data.newChat;\n        const exists = prev.chats.find(\n          ({ id }) => id === newChat.id\n        );\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          chats: [...prev.chats, newChat]\n        });\n      }\n    });\n\n    subscribeToMore({\n      document: NEW_PARTICIPANT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        const newParticipant = subscriptionData.data.newParticipant;\n        const exists = prev.participants.find(\n          ({ id }) => id === newParticipant.id\n        );\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          participants: [...prev.participants, newParticipant]\n        });\n      }\n    });\n\n    subscribeToMore({\n      document: REMOVE_PARTICIPANT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        let res = [];\n\n        const exitedParticipant = subscriptionData.data.removeParticipant;\n        const exists = prev.participants.find(\n          ({ id }) => id === exitedParticipant.id\n        );\n\n        if (!exists) return prev;\n\n        for (let participant of prev.participants) {\n          if (participant.id === exitedParticipant.id) {\n            continue;\n          }\n          res.push(participant);\n        }\n\n        return Object.assign({}, prev, {\n          participants: res\n        });\n      }\n    });\n\n\n    return (\n      <>\n        <MobileNavigation onClick={_ => setToggled(!toggled)}/>\n        <Div>\n            <UserList users={participants}/>\n            <UserListMobile users={participants} toggled={toggled}/>\n            <Section>\n            <ChatBoxSection chats={chats}/>\n            <ChatInputSection>\n                <ChatInput/>\n            </ChatInputSection>\n            </Section>\n        </Div>\n      </>\n    );\n  }\n\n  export default ChatScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $username: String!\n    $password: String!\n  ) {\n    login(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction LoginScreen() {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(\"AUTH_TOKEN\", login.token);\n      localStorage.setItem(\"USERNAME\", login.user.username);\n      history.push('/chat');\n    },\n    onError: (e) => {\n      console.log(e);\n    }\n  });\n\n  const isValid = (username, password) => {\n    if (!username || !password) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    login();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password)}>\n              Login\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/signup\">\n              Signup\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default LoginScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n\n  &:disabled,\n  &[disabled]{\n    opacity: 0.6;\n  }\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $username: String!\n    $password: String!\n  ) {\n    signup(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction SignupScreen(props) {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ signup }) => {\n      localStorage.setItem(\"AUTH_TOKEN\", signup.token);\n      localStorage.setItem(\"USERNAME\", signup.user.username);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password, password2) => {\n    if (!username || !password || !password2) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    if (password2.trim() === \"\") {\n      return false;\n    }\n\n    if (password.value !== password2.value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    signup();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password Confirm\" value={password2} onChange={e => setPassword2(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password, password2)}>\n              Signup\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/\">\n              Back\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default SignupScreen;\n","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport ChatScreen from './screens/ChatScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <main className=\"App\">\n          <Switch>\n              <Route path=\"/chat\" component={ChatScreen}/>\n              <Route exact path=\"/signup\" component={SignupScreen}/>\n              <Route exact path=\"/\" component={LoginScreen}/>\n          </Switch>\n        </main>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  split\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"AUTH_TOKEN\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(\"AUTH_TOKEN\")\n    }\n  }\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return (\n      kind === 'OperationDefinition' &&\n      operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}